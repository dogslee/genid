name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # golint
  golangci:
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: lint
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29
  # container
  container:
    needs: golangci
    runs-on: ubuntu-latest

    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    # container:
    #   image:  redis:latest

    services:
      redis:
        image: redis:latest
        ports:
        - 16379:6379

    steps:
     - uses: actions/checkout@v2
       env:
        # use mongodb for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        MONGODB_HOST: redis
        MONGODB_PORT: ${{ job.services.redis.ports[16379] }}

  # go-test
  test:
    needs: [golangci, container]
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: test
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Test
      run: go test ./...

  # go-coverage
  codecov:
    needs: [golangci, test, container]
    runs-on: ubuntu-latest
    name: codecov
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.x'
      - name: Run coverage
        run: go test -race -coverprofile=coverage.txt -covermode=atomic
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage1.xml,./coverage2.xml # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
